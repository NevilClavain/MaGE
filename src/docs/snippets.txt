




 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :: rendering target access content activation
 
	1/ create target texture with content access activation:
	
		m_rendering_quad_texture = new Texture("rendering_quad_texture", Texture::Format::TEXTURE_RGB, w_width, w_height, Texture::ContentAccessMode::CONTENT_ACCESS);
 
	2/ Access to texture content via TextureContentCopyService :
	
		void* myBuffer;
		size_t myBufferSize;

		core::services::TextureContentCopyService::getInstance()->readTextureContent(m_name, &myBuffer, &myBufferSize);
		
	3/ Access to texture content via a Buffer :
	
 		core::Buffer<core::maths::RGBAColor> texture_content;
		m_rendering_quad_texture->getTextureContent(texture_content);

		const auto pixels{ texture_content.getData() };
		const auto pixel{ pixels[100] };
 
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :: typical deffered shading entity graph
 				
ENTITY_ID = app_Entity ]
	ENTITY_ID = clouds_Entity ]
	ENTITY_ID = gblJoint_Entity ]
		ENTITY_ID = camera_Entity ]
	ENTITY_ID = ground_Entity ]
	ENTITY_ID = raptor_Entity ]
	ENTITY_ID = skydome_Entity ]
	ENTITY_ID = tree_Entity ]	
	ENTITY_ID = screenRendering_Filter_DirectForward_Queue_Entity ]
		ENTITY_ID = loading_gear ]
		ENTITY_ID = logo ]
		ENTITY_ID = screenRendering_Filter_DirectForward_View_Entity ]
		ENTITY_ID = screenRendering_Filter_DirectForward_Quad_Entity ]
			ENTITY_ID = bufferRendering_Combiner_Fog_Queue_Entity ]
				ENTITY_ID = bufferRendering_Combiner_Fog_Quad_Entity ]
					ENTITY_ID = bufferRendering_Scene_TexturesChannel_Queue_Entity ]
						ENTITY_ID = clouds_TexturesChannel_Proxy_Entity ]
						ENTITY_ID = ground_TexturesChannel_Proxy_Entity ]
						ENTITY_ID = raptor_TexturesChannel_Proxy_Entity ]
						ENTITY_ID = skydome_TexturesChannel_Proxy_Entity ]
						ENTITY_ID = tree_TexturesChannel_Proxy_Entity ]
					ENTITY_ID = bufferRendering_Scene_ZDepthChannel_Queue_Entity ]
						ENTITY_ID = ground_FogChannel_Proxy_Entity ]
						ENTITY_ID = raptor_FogChannel_Proxy_Entity ]
						ENTITY_ID = tree_FogChannel_Proxy_Entity ]
				ENTITY_ID = bufferRendering_Combiner_Fog_View_Entity ]
		
		
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :: camera selection
 
	// retrieve entity that owns the rendering queue :
	core::Entitygraph::Node& bufferRenderingQueueNode{ m_entitygraph.node("bufferRenderingEntity") };
	const auto bufferRenderingQueueEntity { bufferRenderingQueueNode.data() };
	
	// activate camera/view in the rendering queue
	const auto& renderingAspect{ bufferRenderingQueueEntity->aspectAccess(core::renderingAspect::id) };
	renderingAspect.getComponent<rendering::Queue>("renderingQueue")->getPurpose().setCurrentView("cameraEntity");
	
	
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :: add time aspect
 
	auto& quad_time_aspect{ myEntity->makeAspect(core::timeAspect::id) };
 
 
 
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :: rendering queue logging 
 
 
	auto renderingQueueSystem{ SystemEngine::getInstance()->getSystem(renderingQueueSystemSlot) };
	auto renderingQueueSystemInstance{ dynamic_cast<renderMe::RenderingQueueSystem*>(renderingQueueSystem) };

	// arg : name of entity that owns the rendering queue we need to log
	renderingQueueSystemInstance->requestRenderingqueueLogging("bufferRenderingEntity");
		
		
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :: log entitygraph content
 
	helpers::logEntitygraph(m_entitygraph);

 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :: New font for text rendering
 
	1/ Generate font file with MakeSpriteFont tool:
	
		MakeSpriteFont "Courier New" CourierNew.32.spritefont /FontSize:32
		
	2/ copy this font file in \SYSTEM_d3d11\fonts
	
	3/ SYSTEM_d3d11 cmake file already insures the font files are deployed in /apps/$<CONFIGURATION>/fonts : 
				
		#deploy DirectXTK fonts
		install(DIRECTORY ${CMAKE_SOURCE_DIR}/SYSTEM_d3d11/fonts DESTINATION ${CMAKE_SOURCE_DIR}/apps/$<CONFIGURATION>)

	4/ add new font in rt window settings json : config_deployment\rt_config\windows_settings.json :
	
		{
		  "fullscreen": false,
		  "width": 1920,
		  "height": 1080,
		  "fonts": 
		  [
			{ "name" : "CourierNew.10.spritefont" },
			{ "name" : "CourierNew.32.spritefont" },
			{ "name" : "Bahnschrift.16.spritefont" }
		  ]
		}
		
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 : Create new App Module : steps ->
 
	1/ duplicate from functional template the following files:
		'src' folder
		CMakeList.txt
		
	2/ open CMakeList.txt and update project : all module_xxx strings
	
	3/ declare new project in root CMakeList.txt : add_subdirectory(module_anims)
	
	4/ add new project in .gitignore file:
	
		/renderme/module_xxx/CMakeFiles/
		/renderme/module_xxx/*.sln
		/renderme/module_xxx/*.vcxproj*
		
	5/ add new 'module_xxx_config' folder under 'config' folder:
		create and edit 'logconf.json' file (duplicate from existing examples)		
		
	6/ duplicate this new 'module_xxx_config' folder under config_deployment folder
	
	7/ edit module_impl.cpp :
	
		std::string ModuleImpl::getModuleName() const
		{
			return "xxx";
		}

		std::string ModuleImpl::getModuleDescr() const
		{
			return "xxx module example";
		}	
		
	8/ edit module_impl_init.cpp and adapt : 
	
	void ModuleImpl::init(const std::string p_appWindowsEntityName)
	{
		/////////// logging conf

		renderMe::core::FileContent<char> logConfFileContent("./module_xxx_config/logconf.json");	
			
		
	
	9/ run 'generate_vs2022.bat'
	
	and it's all set ! :)

 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

 get/update component from entity:

	auto& raptorEntityNode{ m_entitygraph.node("raptorEntity") };
	const auto raptorEntity{ raptorEntityNode.data() };
	auto& anims_aspect{ raptorEntity->aspectAccess(core::animationsAspect::id) };
	auto& animationsIdList{ anims_aspect.getComponent<std::list<std::string>>("eg.std.animationsIdList")->getPurpose()};

		
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  standard components : 
	"eg.std.xxx..."


  standard datacloud objects :

	"std.xxx..."	


 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

 How to plug a rendering pass to screen to help debugging

 1/ root pass : use filter_directforward_switch2chan shaders on top screen pass




	const auto rendering_quad_textures_channnelA{ Texture(Texture::Format::TEXTURE_RGB, w_width, w_height) };
	const auto rendering_quad_textures_channnelB{ Texture(Texture::Format::TEXTURE_RGB, w_width, w_height) };

	auto& screen_rendering_queue{ mage::helpers::plugRenderingQuad(m_entitygraph,
		"screen_queue",
		characteristics_v_width, characteristics_v_height,
		p_id,
		"screenRendering_Filter_DirectForward_Queue_Entity",
		"screenRendering_Filter_DirectForward_Quad_Entity",
		"screenRendering_Filter_DirectForward_View_Entity",
		"filter_directforward_switch2chan_vs",
		"filter_directforward_switch2chan_ps",

		{
			std::make_pair(Texture::STAGE_0, rendering_quad_textures_channnelA),
			std::make_pair(Texture::STAGE_1, rendering_quad_textures_channnelB)
		},
		Texture::STAGE_0

	)};
	
	
 2/ plug filter_directforward_switch2chan switch control ("input_channel") to the datacloud :

	Entity* screenRendering_Filter_DirectForward_Quad_Entity{ m_entitygraph.node("screenRendering_Filter_DirectForward_Quad_Entity").data() };

	auto& screenRendering_Filter_DirectForward_Quad_Entity_rendering_aspect{ screenRendering_Filter_DirectForward_Quad_Entity->aspectAccess(core::renderingAspect::id) };

	rendering::DrawingControl& fogDrawingControl{ screenRendering_Filter_DirectForward_Quad_Entity_rendering_aspect.getComponent<mage::rendering::DrawingControl>("drawingControl")->getPurpose() };
	fogDrawingControl.pshaders_map.push_back(std::make_pair("screen_channel_number", "input_channel"));


 2/ plug the debug rendering queue on filter_directforward_switch2chan channel B
 
 
	// channel B : for debug purposes

	rendering::Queue debugChannelsRenderingQueue("debug_channel_queue");
	debugChannelsRenderingQueue.setTargetClearColor({ 0, 63, 128, 255 });
	debugChannelsRenderingQueue.enableTargetClearing(true);
	debugChannelsRenderingQueue.enableTargetDepthClearing(true);
	debugChannelsRenderingQueue.setTargetStage(Texture::STAGE_1);

	mage::helpers::plugRenderingQueue(m_entitygraph, debugChannelsRenderingQueue, "screenRendering_Filter_DirectForward_Quad_Entity", "bufferRendering_Scene_Debug_Queue_Entity");
	
	
 3/ move the pass we want to visualize under bufferRendering_Scene_Debug_Queue_Entity :
 
	//create_openenv_lit_channel_rendergraph("bufferRendering_Scene_LitChannel_Queue_Entity");
	create_openenv_lit_channel_rendergraph("bufferRendering_Scene_Debug_Queue_Entity");
 
 4/ switch filter_directforward_switch2chan to display the debug channel (channel B) by 
	setting a value > 0 in filter_directforward_switch2chan input_channel.x
	
	dataCloud->updateDataValue<maths::Real4Vector>("screen_channel_number", maths::Real4Vector(1.0, 0.0, 0.0, 0.0));
 
	
 





